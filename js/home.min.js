// ---------- Utils ----------
const $ = (sel, root = document) => root.querySelector(sel);
const $$ = (sel, root = document) => Array.from(root.querySelectorAll(sel));
const on = (el, type, handler, opts) => el && el.addEventListener(type, handler, opts);

// Safe localStorage helpers
const lsGet = (k, fallback = null) => {
  try { const v = localStorage.getItem(k); return v ?? fallback; } catch { return fallback; }
};
const lsSet = (k, v) => { try { localStorage.setItem(k, v); } catch {} };

// ---------- Exploding Nav ----------
const explodingNav = $(".exploding-nav");
const explodingNavButton = $(".exploding-nav-button");

function toggleNavOpen(e) {
  e?.preventDefault?.();
  if (!explodingNav) return;
  if (explodingNav.classList.contains("active")) {
    window.playSoundEffect?.("power-down");
  } else {
    window.playSoundEffect?.("power-up");
  }
  explodingNav.classList.remove("first-run");
  explodingNav.classList.toggle("active");
}

on(explodingNavButton, "click", toggleNavOpen);

// ---------- Settings (sound + panel) ----------
const settingsButton = $(".site-settings-button");
const panel = $(".site-settings-panel");
const soundToggle = document.querySelector("[data-setting='sound']");
const soundImage = soundToggle?.querySelector("img");

function toBool(v, defaultVal = true) {
  if (v === null || v === undefined) return defaultVal;
  if (typeof v === "boolean") return v;
  const s = String(v).toLowerCase();
  return s === "true" || s === "1" || s === "yes" || s === "on";
}

let isSoundEnabled = toBool(lsGet("settings:sound"), true);

function applySoundState() {
  // Mute the sprite howl if present
  if (window.sound && typeof window.sound.mute === "function") {
    window.sound.mute(!isSoundEnabled);
  }
  // Globally mute any other Howls (e.g., bb8)
  if (window.Howler && typeof Howler.mute === "function") {
    Howler.mute(!isSoundEnabled);
  }
  // Update the icon
  if (soundImage?.dataset) {
    soundImage.src = isSoundEnabled
      ? (soundImage.dataset.imageOn || soundImage.src)
      : (soundImage.dataset.imageOff || soundImage.src);
  }
}

function toggleSettings() {
  panel?.classList.toggle("site-settings-panel-open");
}

function toggleSound() {
  isSoundEnabled = !isSoundEnabled;
  lsSet("settings:sound", String(isSoundEnabled));
  applySoundState();
}

on(settingsButton, "click", toggleSettings);
on(soundToggle, "click", toggleSound);

// ---------- Hero taglines ----------
const taglines = [
  { size: "8.44vw", "size-lg": "65.5px", text: "has a lot of ideas" },
  { rotation: "11deg", scale: "1.2", size: "8.44vw", "size-lg": "65.5px", text: '<span class="love"></span>s testing business ideas', top: "0" },
  { size: "8.44vw", "size-lg": "65.5px", text: "Invests responsibly... ish" },
  { rotation: "-9deg", scale: "1.15", size: "8.44vw", "size-lg": "65.5px", text: "Is about 73% organised" },
  { rotation: "18deg", scale: 1.35, size: "8.44vw", "size-lg": "65.5px", text: '<span class="love">love</span>s reading terms & conditions', top: "0.025em" },
  { scale: 1.3, rotation: "-3deg", size: "8.44vw", "size-lg": "65.5px", text: 'I <span class="love">love</span> to research stocks like a weirdo', top: "-0.1em" },
  { rotation: "-11deg", scale: 1.3, size: "8.44vw", "size-lg": "65.5px", text: '<span class="love">love</span>s that VR is cheaper than therapy' },
];

const heroTaglineEl = $(".hero-tagline");
let currentIndex = 0;

function cycleTagline() {
  // Show confetti but don't play the default 'boop' (bb8 plays on click)
  window.addBoop?.(false);
  currentIndex = (currentIndex + 1) % taglines.length;
  const e = taglines[currentIndex];
  if (!heroTaglineEl) return;
  heroTaglineEl.style.setProperty("--top", e.top || "-7px");
  heroTaglineEl.style.setProperty("--rotation", e.rotation || "0deg");
  heroTaglineEl.style.setProperty("--scale", e.scale || 1.1);
  heroTaglineEl.style.setProperty("--size", e.size || "8.44vw");
  heroTaglineEl.style.setProperty("--size-lg", e["size-lg"] || "65.5px");
  heroTaglineEl.innerHTML = e.text;
}

const taglineButton = $(".hero-cycle");
// Ensure SFX binding uses our bb8 sound
taglineButton && (taglineButton.dataset.soundClick = "bb8");
on(taglineButton, "click", () => {
  taglineButton.classList.add("active");
  setTimeout(() => taglineButton.classList.remove("active"), 500);
  cycleTagline();
});

// ---------- Boop physics (Matter.js) ----------
(function initBoops() {
  const worldCanvas = $(".boop-drop");
  const heroBlock = $(".hero-block");

  // If Matter or required elements aren’t present, no worries — skip this feature.
  if (!worldCanvas || !heroBlock || !window.Matter) {
    // Provide a no-op addBoop so callers don’t crash.
    window.addBoop = (play = false) => { if (play) window.playSoundEffect?.("boop"); };
    return;
  }

  const { Engine, Render, Runner, World, Bodies } = window.Matter;
  const { width, height } = heroBlock.getBoundingClientRect();

  function createBall() {
    return Bodies.circle(Math.round(Math.random() * width), -30, 25, {
      angle: Math.PI * (2 * Math.random() - 1),
      friction: 0.001,
      frictionAir: 0.01,
      restitution: 0.8,
      render: { sprite: { texture: "https://static-cdn.jtvnw.net/emoticons/v1/301299185/2.0" } },
    });
  }

  const engine = Engine.create();
  const runner = Runner.create();
  const render = Render.create({
    canvas: worldCanvas,
    engine,
    options: { width, height, background: "transparent", wireframes: false },
  });

  const boundaryOptions = { isStatic: true, render: { fillStyle: "transparent", strokeStyle: "transparent" } };
  const ground = Bodies.rectangle(width / 2, height, width + 20, 4, boundaryOptions);
  const leftWall = Bodies.rectangle(0, height / 2, 4, height, boundaryOptions);
  const rightWall = Bodies.rectangle(width, height / 2, 4, height, boundaryOptions);

  Render.run(render);
  Runner.run(runner, engine);
  World.add(engine.world, [ground, leftWall, rightWall]);

  const addBoop = (play = true) => {
    if (play) window.playSoundEffect?.("boop");
    World.add(engine.world, [createBall()]);
  };

  window.addBoop = addBoop;
  addBoop(false);
})();

// ---------- Bio length control (SAFE if #bio is removed) ----------
(function initBio() {
  // Everything here is optional: run only if the nodes exist
  const biosTpl = $("#bios")?.content?.cloneNode?.(true) ? $("#bios").content.cloneNode(true) : null;
  const bioEl = $(".bio");
  const options = $(".bio-length-options");

  if (!biosTpl || !bioEl || !options) return;

  on(options, "change", (e) => {
    if (!e.target?.value) return;
    const selected = biosTpl.querySelector(`[data-length='${e.target.value}']`);
    if (selected) bioEl.innerHTML = selected.innerHTML;
  });
})();

// ---------- Gallery (SAFE if gallery is removed) ----------
(function initGallery() {
  const gallery = $(".gallery-image");
  const thumbs = $(".gallery-thumbnails");
  if (!gallery || !thumbs) return;

  const img = $("img", gallery);
  const caption = $(".image-caption", gallery);
  const creditLink = $(".gallery-credit a", gallery);
  const fullSizeLink = $(".gallery-fullsize-link", gallery);

  function updateImage(e) {
    const t = e.target.closest("button, img")?.querySelector("img") || e.target;
    if (!t?.dataset) return;
    const n = t.dataset.publicId;
    const o = t.dataset.alt;
    const s = `https://res.cloudinary.com/jlengstorf/image/upload/w_800,h_800,c_fill,g_faces,q_auto,f_auto/${n}.jpg`;
    const a = `https://res.cloudinary.com/jlengstorf/image/upload/w_400,h_400,c_fill,g_faces,q_auto,f_auto/${n}.jpg 1x, https://res.cloudinary.com/jlengstorf/image/upload/w_800,h_800,c_fill,g_faces,q_auto,f_auto/${n}.jpg 2x`;
    const l = `https://res.cloudinary.com/jlengstorf/image/upload/${n}.jpg`;

    if (img) { img.src = s; img.srcset = a; img.alt = o || ""; }
    if (caption) caption.innerText = t.dataset.caption || "";
    if (creditLink) { creditLink.href = t.dataset.creditLink || "#"; creditLink.innerText = t.dataset.credit || ""; }
    if (fullSizeLink) fullSizeLink.href = l;
  }

  on(thumbs, "click", updateImage);
  on(thumbs, "keydown", (e) => { if (e.key === "Enter") updateImage(e); });
})();

// ---------- Sounds (Howler) ----------
(function initSound() {
  // Bail if Howler isn't present
  if (typeof Howl === "undefined") {
    window.sound = { mute: () => {} };
    window.playSoundEffect = () => {};
    return;
  }

  // Main sprite-based SFX
  const sound = new Howl({
    src: [
      "https://res.cloudinary.com/jlengstorf/video/upload/q_auto/v1642207423/jason.energy/sfx/sprite.webm",
      "https://res.cloudinary.com/jlengstorf/video/upload/q_auto/v1642207423/jason.energy/sfx/sprite.mp3",
    ],
    sprite: {
      airhorn: [0, 2076],
      beep: [2205, 378],
      boop: [2724, 483],
      click: [3373, 273],
      hooray: [3762, 900],
      oop: [4800, 324],
      pop: [5319, 324],
      "power-down": [5838, 952],
      "power-up": [7005, 953],
      woohoo: [8173, 743],
      yay: [9081, 1265],
    },
  });

  // BB-8 clip for the hero-cycle
  const bb8 = new Howl({
    src: ["images/bb8.webm"],
    volume: 0.6
  });

  window.sound = sound;

  // Router: play sprite by name, or bb8 for hero
  window.playSoundEffect = (name = "boop") => {
    if (name === "bb8") {
      bb8.play();
    } else {
      sound.play(name);
    }
  };

  // Apply current saved sound state (mutes everything)
  applySoundState();
})();

// ---------- Hover / Click / Focus SFX (safe) ----------
(function initSfxBindings() {
  $$.call ? null : null; // keep bundlers happy if $$ is treeshaken
  $$(".[data-sound-hover]"); // noop to hint selectors

  const hoverEls = $$("[data-sound-hover]");
  hoverEls.forEach((el) => {
    const soundName = el.dataset.soundHover;
    on(el, "mouseenter", () => window.playSoundEffect?.(soundName));
  });

  const clickEls = $$("[data-sound-click]");
  clickEls.forEach((el) => {
    const soundName = el.dataset.soundClick;
    on(el, "mousedown", (e) => {
      window.playSoundEffect?.(soundName);
      e.preventDefault();
    });
    on(el, "keydown", (e) => {
      if (e.key === "Enter") window.playSoundEffect?.(soundName);
    });
  });

  const focusEls = $$("[data-sound-focus]");
  focusEls.forEach((el) => {
    const soundName = el.dataset.soundFocus;
    on(el, "focus", () => window.playSoundEffect?.(soundName));
  });
})();
